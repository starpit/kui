/*
 * Copyright 2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@import '_mixins';
@import '../Sidecar/_mixins';

/** Inset of the <input> element w.r.t. the bordered/backgrounded region */
$inset: 0.375rem;

/** Padding for action buttons */
$action-padding: 3px;

/** Hover hysteresis for showing action buttons */
$action-hover-delay: 140ms;

/** Color to indicate focused block */
$focus-color: var(--color-brand-01);

.repl-input,
.repl-input-sourceref,
.repl-output {
  padding-right: calc(1rem - 6px);
}

@mixin show-block-action-buttons {
  .kui--block-actions-buttons {
    width: auto;
    opacity: 1;
    right: 0;
  }
}

/** Coloring the context border by status of the block */
@include Scrollback {
  .repl-input:hover,
  .repl-output:hover {
    @include show-block-action-buttons;
  }
  .repl-input:hover {
    .kui--repl-block-timestamp {
      opacity: 0; /* rather than display: none to avoid reflow on hover */
      transition-delay: $action-hover-delay;
    }
  }

  & > li:focus {
    outline: none;
  }
  .repl-block {
    position: relative;

    &:before {
      background-color: var(--color-table-border2);
      border-left: none;
      border-right: none;
      border-radius: 1px;
      opacity: 0.5;
      content: '';
      left: 0;
      position: absolute;
      top: 0.1875rem;
      bottom: 0.1875rem;
      width: 5px;
      border-top-right-radius: 1px;
      border-bottom-right-radius: 1px;
    }
    &:not([data-is-output-only]) .repl-output.repl-result-has-content {
      margin-top: 0.5rem;
    }
    .repl-output:not(.repl-result-has-content) {
      .repl-context {
        display: none;
      }
    }
    &.error:before {
      opacity: 1;
      background-color: var(--color-error);
    }
    &:hover .repl-output .repl-context:after {
      border-color: var(--color-base03);
    }
  }

  /** focus */
  li:focus .repl-block,
  .repl-block.repl-active[data-is-focused] {
    @include show-block-action-buttons;

    &:before {
      opacity: 1;
    }
    &:before {
      background-color: $focus-color;
    }
    .repl-context {
      opacity: 1;
    }
  }
  li:hover .repl-block:before {
    background-color: $focus-color;
  }
  li:not(:focus) {
    .repl-block {
      &[data-is-output-only]:before {
        background-color: transparent;
      }
      .repl-context:hover,
      .repl-input-element:hover {
        cursor: pointer;
      }
    }
  }

  & > li {
  }
  & > li .repl-block {
    display: flex;
    flex-direction: column;
    padding: 0.875rem 0;

    &[data-is-quietly-elsewhere] {
      padding-top: 0;
      repl-output {
        margin-top: 0;
      }
    }

    /* special bg color for Actions inside of output-only versus input blocks, to occlude repl-input-element */
    .kui--block-actions-buttons {
      background-color: var(--color-base03);
    }
    .repl-output .kui--block-actions-buttons {
      top: -0.25rem;
      bottom: calc(100% - 1.5rem);
    }
    .kui--block-actions-buttons {
      align-items: center;
      display: flex;
      width: 0;
      opacity: 0;
      border-radius: 1px;

      position: absolute;
      top: 0; /* this with bottom:0 gives 1) vertical center; 2) occluding of repl-input-element content */
      bottom: 0;
      right: -100rem; /* we will change this on hover */

      padding-left: 0.5rem;
      transition-property: right;
      transition-delay: $action-hover-delay;
      transition-duration: 140ms;
    }

    .kui--block-action {
      align-items: center;
      display: flex;
      margin-right: $action-padding;
      padding: $action-padding;
      color: var(--color-text-01);

      /* This is a bit of a hack for TwoFaceIcon, to work around the Checkmark being narrower than other icons in Carbon */
      svg {
        fill: currentColor;
        min-width: 1rem;
      }

      .green-text {
        color: var(--color-ok);
      }
      .red-text {
        color: var(--color-error);
      }
      .yellow-text {
        color: var(--color-warning);
      }
    }

    .kui-block-actions-others {
      padding-right: $action-padding;
      margin-right: $action-padding;
      display: flex;
      border-right: 1px solid var(--color-table-border1);
    }

    .kui--block-action:hover {
      background-color: var(--color-table-border1);
    }

    .repl-input,
    .repl-input-sourceref,
    .repl-output {
      padding-left: 1rem;
    }
    .repl-input .kui--toolbar-button-with-icon {
      /* have buttons fit inside the input region */
      height: 1.125rem;
    }
    .repl-context {
      color: var(--color-text-02);
      display: flex;
      justify-content: flex-end;
      flex-basis: 3rem;
      text-align: end;
      margin-right: 0.5rem;
      position: relative;
      opacity: 0.75;
    }

    .repl-input .repl-context:before {
      left: -1rem !important;
    }

    &:not(.repl-active) {
      .repl-input {
        .repl-context {
          padding-top: $inset;
        }
      }
      .repl-input-element-wrapper {
        border: 1px solid transparent;
        align-items: stretch;
        padding-left: 0.5rem;
        position: relative; /* for repl-block-actions' position: absolute */
        .repl-input-element,
        .kui--repl-input-element-nbsp {
          padding: $inset 0;
          padding-right: $inset; /* to pad against timestamp and action buttons */
        }
      }
    }
    &:not(.repl-active) {
      .repl-input-element-wrapper {
        background-color: $input-bg;
        border-color: $input-border;
        border-radius: 1px;

        &[data-is-reedit] {
          border-color: $input-border-editing;
        }
      }
    }
    .repl-output .repl-context {
      opacity: 0;
    }

    &[data-is-output-only] {
      .repl-result .kui--card:not([data-is-editing]) {
        padding: 0;
        background: none;
        box-shadow: none;
        .kui--card-body {
          padding: 0;
        }
      }

      /* repl right-hand decorations */
      .repl-output .repl-prompt-right-elements {
        position: absolute;
        right: 0.25rem;
        top: -0.25rem;
      }
    }

    .kui--repl-result-else {
      font-size: 0.75rem;
      font-family: var(--font-sans-serif);
      &,
      a {
        color: var(--color-text-02);
      }
      a {
        font-weight: bold;
      }
    }
  }
  .kui--repl-block-right-element {
    color: var(--color-text-02);
    font-size: 0.625rem;
  }

  .kui--repl-block-spinner {
    font-size: 1.25rem;
    margin: 0 0.5rem;
    color: var(--active-tab-color);
  }
  .repl-context .kui--repl-block-spinner {
    font-size: initial;
    margin: 0;
  }
}

@include sidecar-visible {
  @include Scrollback {
    @include HideIn;
  }
}
@include MiniSplit {
  @include HideIn;
}

@mixin timestamp-like {
  margin: 0 0.5rem;
  display: flex;
  align-items: center;
  transition-delay: $action-hover-delay;
  transition-property: opacity;
}

/* timestamp */
.repl-block {
  .kui--repl-block-timestamp {
    @include timestamp-like();
  }
  .kui--repl-block-re-editing {
    @include timestamp-like();
  }
}
@include sidecar-visible {
  /* timestamp when sidecar is visible */
  .kui--repl-block-timestamp {
    /* hide repl timestamp  */
    display: none;
  }
}
